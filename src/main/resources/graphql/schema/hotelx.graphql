schema {
    query: HotelXQuery
}
input HotelCriteriaSearchInput {
    checkIn: Date!
    checkOut: Date!
    hotels: [String!]
    destinations: [String!]
    occupancies: [RoomInput!]!
    language: Language
    currency: Currency
    nationality: Country
    market: String
}

input RoomInput {
    paxes: [PaxInput!]!
}

input PaxInput {
    age: Int!
}

input HotelSettingsInput{
    context: String
    useContext: Boolean
    connectUser: String
    client: ID
    group: ID
    timeout: Int
    auditTransactions: Boolean
    businessRules: BusinessRulesInput
    suppliers: [HotelXSupplierInput!]
    plugins: [PluginStepInput!]
    testMode: Boolean
    clientTokens: [String!]
}

input BusinessRulesInput {
    optionsQuota: Int
    businessRulesType: BusinessRulesType
}

enum BusinessRulesType{
    CHEAPER_AMOUNT,
    ROOM_TYPE,
}

input HotelXSupplierInput {
    settings: SettingsBaseInput
    code: String!
    accesses: [HotelXAccessInput!]
}

input SettingsBaseInput {
    timeout: Int
    auditTransactions: Boolean
    businessRules: BusinessRulesInput
    currency: Currency
}

input HotelXAccessInput {
    accessId: ID!
    configuration: ConfigurationInput
    settings: SettingsBaseInput
}

input ConfigurationInput {
    username: String
    password: String
    urls: UrlsInput!
    parameters: [ParameterInput!]
    markets: [String!]
    rateRules: [RateRulesType!]
}

enum RateRulesType{
    PACKAGE,
    OLDER55,
    OLDER60,
    OLDER65,
    CANARY_RESIDENT,
    BALEARIC_RESIDENT,
    LARGE_FAMILY,
    HONEYMOON,
    PUBLIC_SERVANT,
    UNEMPLOYED,
    NORMAL,
    NON_REFUNDABLE,
}

input ParameterInput {
    key: String!
    value: String!
}

input UrlsInput {
    search: URI
    quote: URI
    book: URI
    generic: URI
}

input PluginStepInput {
    step: PluginStepType!
    pluginsType: [PluginsInput!]
}
enum PluginStepType{
    REQUEST,
    REQUEST_ACCESS,
    RESPONSE_OPTION,
    RESPONSE_ACCESS,
    RESPONSE,
}

input PluginsInput {
    type: PluginType!
    name: String!
    parameters: [ParameterInput!]
}
enum PluginType{
    PRE_STEP,
    HOTEL_MAP,
    BOARD_MAP,
    ROOM_MAP,
    CURRENCY_CONVERSION,
    MARKUP,
    AGGREGATION,
    POST_STEP,
    COMMISSION,
}

input FilterInput {
    access: AccessFilterInput
    rateRules: RateRulesFilterInput
}

input AccessFilterInput {
    includes: [ID!]
    excludes: [ID!]
}

input RateRulesFilterInput {
    includes: [RateRulesType!]
    excludes: [RateRulesType!]
}

input HotelXFilterSearchInput {
    access: AccessFilterInput
    rateRules: RateRulesFilterInput
    plugin: HotelXPluginFilterInput
}

input HotelXPluginFilterInput {
    includes: [HotelXFilterPluginTypeInput!]
    excludes: [HotelXFilterPluginTypeInput!]
}

input HotelXFilterPluginTypeInput {
    step: PluginStepType!
    type: String!
    name: String!
}

type HotelSearch {
    context: String
    stats( token: String!, ): StatsRequest
    auditData: AuditData
    requestCriteria: CriteriaSearch
    options: [HotelOptionSearch!]
    errors: [Error!]
    warnings: [Warning!]
}

type StatsRequest {
    total: Stat!
    validation: Stat!
    process: Stat!
    configuration: Stat!
    request: Stat!
    response: Stat!
    requestPlugin: StatPlugin
    responsePlugin: StatPlugin
    hotels: Int!
    zones: Int!
    cities: Int!
    dockerID: String!
    Accesses: [StatAccess!]!
}

type Stat {
    start: DateTime!
    end: DateTime!
    duration: Float
}

type StatPlugin {
    name: String!
    total: Stat!
}

type StatAccess {
    name: String!
    total: Stat!
    staticConfiguration: Stat
    hotels: Int!
    zones: Int!
    cities: Int!
    requestAccess: StatPlugin
    responseAccess: StatPlugin
    transactions: [StatTransaction!]!
    plugins: [StatPlugin!]
}

type StatTransaction {
    reference: String!
    total: Stat!
    buildRequest: Stat!
    workerCommunication: Stat!
    parseResponse: Stat!
}

type AuditData {
    transactions: [Transactions!]!
    timeStamp: DateTime!
    processTime: Float!
}

type Transactions {
    request: String!
    response: String!
    timeStamp: DateTime!
}

type CriteriaSearch {
    checkIn: Date!
    checkOut: Date!
    hotels: [String!]!
    occupancies: [RoomCriteria!]!
    language: Language
    currency: Currency
    nationality: Country
    market: String!
}

type RoomCriteria {
    paxes: [Pax!]!
}

type Pax {
    age: Int!
}

type Error {
    code: String!
    type: String!
    description: String!
}

type Warning {
    code: String!
    type: String!
    description: String!
}

type HotelOptionSearch {
    supplierCode: String!
    accessCode: String!
    market: String!
    hotelCode: String!
    hotelCodeSupplier: String!
    hotelName: String
    boardCode: String!
    boardCodeSupplier: String!
    paymentType: PaymentType!
    status: StatusType!
    occupancies: [Occupancy!]!
    rooms: [Room!]!
    price: Price!
    supplements: [Supplement!]
    surcharges: [Surcharge!]
    rateRules: [RateRulesType!]
    cancelPolicy: CancelPolicy
    remarks: String
    addOns: AddOns
    id: String!
}

enum PaymentType{
    MERCHANT,
    DIRECT,
    CARD_BOOKING,
    CARD_CHECK_IN,
    PAYX,
}

enum StatusType{
    OK,
    RQ,
}

type Occupancy {
    id: Int!
    paxes: [Pax!]!
}

type Room {
    occupancyRefId: Int!
    legacyRoomId: String!
    code: String!
    supplierCode: String!
    description: String
    refundable: Boolean
    units: Int
    roomPrice: RoomPrice!
    beds: [Bed!]
    ratePlans: [RatePlan!]
    promotions: [Promotion!]
    surcharges: [Surcharge!]
    features: [Feature!]
}

type RoomPrice {
    price: Price!
    breakdown: [PriceBreakdown!]
}

type PriceBreakdown {
    start: Date!
    end: Date!
    price: Price!
}

type Price {
    currency: Currency!
    binding: Boolean!
    net: Float!
    gross: Float
    exchange: Exchange!
    markups: [Markup!]
}

type Exchange {
    currency: Currency!
    rate: Float!
}

type Markup {
    channel: String
    currency: Currency!
    binding: Boolean!
    net: Float!
    gross: Float
    exchange: Exchange!
    rules: [Rule!]!
}

type Rule {
    id: String!
    name: String
    type: MarkupRuleType!
    value: Float!
}

enum MarkupRuleType{
    PERCENT,
    IMPORT,
}

type Surcharge {
    chargeType: ChargeType!
    mandatory: Boolean!
    price: Price!
    description: String
}

enum ChargeType{
    INCLUDE,
    EXCLUDE,
}

type CancelPolicy {
    refundable: Boolean!
    cancelPenalties: [CancelPenalty!]
}

type CancelPenalty {
    hoursBefore: Int!
    penaltyType: CancelPenaltyType!
    currency: Currency!
    value: Float!
}

enum CancelPenaltyType{
    NIGHTS,
    PERCENT,
    IMPORT,
}

type AddOns {
    distribution: [AddOn!]
}

type AddOn {
    key: String!
    value: JSON!
}

type Bed {
    type: String
    count: Int
    shared: Boolean
}

type RatePlan {
    code: String!
    supplierCode: String!
    name: String
    start: Date
    end: Date
}

type Promotion {
    code: String!
    name: String
    start: Date
    end: Date
}

type Feature {
    code: String!
}

type Supplement {
    code: String!
    name: String
    description: String
    supplementType: SupplementType!
    chargeType: ChargeType!
    mandatory: Boolean!
    durationType: DurationType
    quantity: Int
    unit: UnitTimeType
    start: Date
    end: Date
    resort: Resort
    price: Price
}

enum SupplementType{
    SKI_PASS,
    LESSONS,
    MEALS,
    EQUIPMENT,
    TICKET,
    TRANSFERS,
    GALA,
    ACTIVITY,
}

enum DurationType{
    RANGE,
    OPEN,
}

enum UnitTimeType{
    DAY,
    HOUR,
}

type Resort {
    code: String!
    name: String
    description: String
}

type HotelXQuery{
    search(
        token: String,
        criteria: HotelCriteriaSearchInput,
        settings: HotelSettingsInput,
        filter: FilterInput,
        filterSearch: HotelXFilterSearchInput,
    ): HotelSearch
}

scalar Date

scalar Language

scalar Currency

scalar Country

scalar URI

scalar DateTime

scalar JSON